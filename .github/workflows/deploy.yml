name: Deploy with Docker

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Docker Hub에 로그인 (Secrets 사용)
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 3. Docker 이미지 빌드 및 푸시 (CI)
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          # 이미지 이름: {DockerHub계정}/{이미지이름}:{태그}
          tags: ${{ secrets.DOCKER_NICKNAME }}/core-api:latest

      # 4. 서버에 접속하여 새 컨테이너 실행 (CD)
      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # 1. .env 파일을 생성할 디렉터리로 이동 (예시: /home/ubuntu/my-project)
            cd /home/ubuntu/core-api

            # 2. GitHub Secrets를 사용해 .env 파일을 새로 생성
            #    Heredoc(<< EOF)을 사용하여 여러 줄의 내용을 파일에 덮어쓴다.
            cat << EOF > .env
            DB_HOST=${{ secrets.MYSQL_HOST }}
            DB_PORT=${{ secrets.MYSQL_PORT }}
            DB_USERNAME=${{ secrets.MYSQL_USERNAME }}
            DB_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
            DB_NAME=${{ secrets.MYSQL_DATABASE }}
            NODE_ENV=production
            EOF

            # 최신 이미지 받아오기
            docker pull ${{ secrets.DOCKER_NICKNAME }}/core-api:latest

            # 기존 컨테이너가 있으면 중지하고 삭제
            docker stop core-api-container || true
            docker rm core-api-container || true

            # 새 컨테이너 실행
            docker run -d --name core-api-container \
              -p 3000:3000 \
              --env-file ./.env \
              ${{ secrets.DOCKER_NICKNAME }}/core-api:latest
